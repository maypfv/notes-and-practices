
>> question 1 trials


import {stack, make_cross, rcross, stack_frac, show, heart, circle, square, sail, quarter_turn_left, quarter_turn_right, beside_frac, turn_upside_down, blank, nova, corner} from "rune";


show(make_cross(rcross));

show(stack (heart, rcross));


function repeat_pattern (n, pat, rune) {
    return n === 0
    ? rune
    : repeat_pattern (n-1, pat, pat(rune));
}
repeat_pattern(3, square, 2); 

function fractal (pic, n) {
    return quarter_turn_left (
        stackn (n, beside( 
            )));

function repeat_pattern (n, pat, rune) {
    return n === 0
    ? rune 
    : repeat_pattern (n-1, pat, pat(rune));
}
show(repeat_pattern(3, make_cross, heart)); 

show (repeat_pattern(3, make_cross, heart));



// final answer 

function fractal(pic, n) {
    // your answer here
    return n === 1
    ? pic
    : beside (pic, stack (fractal(pic, n-1), fractal(pic, n-1)));
}

// Test
show(fractal(make_cross(rcross), 5));


>> question 2 trials 

function hook(frac) {
    // your answer here
    return frac >= 1
    ? blank 
    : stack_frac (frac, blank,  )
    
} 


show(blank);
show(square);


// final answer 

function hook(frac) {
    // your answer here
    return stack(square, 
        beside_frac(1-frac, blank, square));
}

// Test
show(hook(1/5));



// question 3 trials 



function spiral(thickness, depth) {
    // your answer here
   return depth === 0 
    ? blank
    :stack_frac (thickness, hook(thickness/2), 
    quarter_turn_right(spiral(thickness, depth-1)));
}

// copy your hook function from Question 2 here if required
function hook(frac) {
    // your answer here
    return stack(square, 
        beside_frac(1-frac, blank, square));
} 

//Test
show(spiral(1 / 5, 20));

